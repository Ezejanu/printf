/**
#include <stdio.h>
#include <stdlib.h>
#include "main.h"

 * main - Entry point
 *
 * Return: 0 on success, error code otherwise
 
int main(void)
{
	int len, len2;

	len = _printf("Complete the sentence: You %s nothing, Jon Snow.\n", (char *)0);
	len2 = printf("Complete the sentence: You %s nothing, Jon Snow.\n", (char *)0);
	
	printf("%d, %d\n", len, len2);
	_printf("%d, %d\n", len, len2);

	fflush(stdout);
	if (len != len2)
	{
		printf("Lengths differ.\n");
		fflush(stdout);
		return (1);
	}
	return (0);
}
*/

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include "main.h"

/**
 * main - Entry point
 *
 * Return: 0 on success, error code otherwise

int main(void)
{
	int len, len2;

	len = _printf("%d + %d = %d\n", INT_MIN, INT_MAX, (INT_MIN + INT_MAX));
	len2 = printf("%d + %d = %d\n", INT_MIN, INT_MAX, (INT_MIN + INT_MAX));
	printf("%d, %d\n", len, len2);
	_printf("%d, %d\n", len, len2);

	fflush(stdout);
	if (len != len2)
	{
		printf("Lengths differ.\n");
		fflush(stdout);
		return (1);
	}
	return (0);
}
*/

#include <stdio.h>
#include <stdlib.h>
#include "main.h"

/**
 * main - Entry point
 *
 * Return: 0 on success, error code otherwise

int main(void)
{
	int len, len2;

	len = _printf("%b - %b = %b\n", 2048, 1024, 1024);
	len2 = printf("100000000000 - 10000000000 = 10000000000\n");
	fflush(stdout);
	if (len != len2)
	{
		printf("Lengths differ.\n");
		fflush(stdout);
		return (1);
	}
	return (0);
}
*/

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include "main.h"


/**
 * main - Entry point
 *
 * Return: 0 on success, error code otherwise

int main(void)
{
	int len, len2;
	long int l = UINT_MAX;

	l += 1024;
	len = _printf("%u", l);
	_putchar('\n');
	len2 = printf("%u", l);
	_putchar('\n');
	fflush(stdout);
	_putchar('\n');

	if (len != len2)
	{
		printf("Lengths differ.\n");
		fflush(stdout);
		return (1);
	}
	return (0);
}
*/

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include "main.h"

/**
 * main - Entry point
 *
 * Return: 0 on success, error code otherwise

int main(void)
{
	int len, len2;
	long res = INT_MAX;

	res *= 2;
	len = _printf("%u + %u = %u\n", INT_MAX, INT_MAX, res);
	len2 = printf("%u + %u = %u\n", INT_MAX, INT_MAX, res);
	fflush(stdout);
	if (len != len2)
	{
		printf("Lengths differ.\n");
		fflush(stdout);
		return (1);
	}
	return (0);
}

int main(void)
{
	int len, len2;
	long res = INT_MAX;

	res *= 2;
	len = _printf("%o + %o = %o\n", INT_MAX, INT_MAX, res);
	len2 = printf("%o + %o = %o\n", INT_MAX, INT_MAX, res);
	fflush(stdout);
	if (len != len2)
	{
		printf("Lengths differ.\n");
		fflush(stdout);
		return (1);
	}
	return (0);
}

int main(void)
{
	int len, len2;
	long res = INT_MAX;

	res *= 2;
	len = _printf("%x + %x = %x\n", INT_MAX, INT_MAX, res);
	len2 = printf("%x + %x = %x\n", INT_MAX, INT_MAX, res);
	fflush(stdout);
	if (len != len2)
	{
		printf("Lengths differ.\n");
		fflush(stdout);
		return (1);
	}
	return (0);
}


**
 * main - Entry point
 *
 * Return: 0 on success, error code otherwise

int main(void)
{
	int len, len2;
	char *str = "When %s invoke GCC, it %s and linking. The %coverall options%c allow you to stop this process at an intermediate stage. %s the -c option says not to run the linker. %s preprocessor and %cthers the compiler itself. Yet other %s need to use any of them.\n\nMost of the command line options that you can use with GCC are useful for C programs; when an option is only useful with another language (usually C ++ ), the explanation says so explicitly. If the description for a particular option does not mention a source language, you can use that option with all supported languages.\n\nThe gcc program accepts options and file names as operands. Many options have multi-letter names; therefore multiple single-letter options may not%d\n";
	char *tmp = "Then the output consists of object files output by the assembler.\n\nOther options are passed on to one stage of processing. Some options control the";
	char *tmp2 = "options control the assembler and linker; most of these are not documented here, since you rarely";

	len = _printf(str, "you", "normally does preprocessing, compilation, assembly", '"', '"', "For example,", tmp, 'o', tmp2, 8);
	len2 = printf(str, "you", "normally does preprocessing, compilation, assembly", '"', '"', "For example,", tmp, 'o', tmp2, 8);
	fflush(stdout);
	if (len != len2)
	{
		printf("Lengths differ.\n");
		fflush(stdout);
		return (1);
	}
	return (0);
}

int main(void)
{
	int len, len2;

	len = _printf("%S", "No special character.");
	len2 = printf("No special character.");
	fflush(stdout);
	if (len != len2)
	{
		printf("Lengths differ.\n");
		fflush(stdout);
		return (1);
	}
	return (0);
}
*/


int main(void)
{
	int len, len2;
	void *p = (void *)0x7fff5100b608;

	len = _printf("%p", p);
	_putchar('\n');
	len2 = printf("%p", p);
	_putchar('\n');

	fflush(stdout);
	_putchar('\n');

	if (len != len2)
	{
		printf("Lengths differ.\n");
		fflush(stdout);
		return (1);
	}
	return (0);
}
